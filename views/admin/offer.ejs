<%- include('../../views/partials/admin/header') %>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="content">
    <div class="content-header">
        <div class="header-left">
            <h2 class="content-title">Offers</h2>
        </div>
        <div class="header-right">
            <div class="search-bar">
                <form id="searchForm" action="/admin/offers" method="GET">
                    <div class="search-container">
                        <input type="text" id="searchInput" name="search" placeholder="Search offers" value="<%= searchQuery || '' %>">
                        <span id="clearSearch" class="clear-search">Ã—</span>
                        <button type="submit">Search</button>
                    </div>
                </form>
            </div>
            <button class="add-offer-btn" id="openModalBtn" data-bs-toggle="modal" data-bs-target="#offerModal">ADD Offer +</button>
        </div>
    </div>
    
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>OFFER NAME</th>
                    <th>DISCOUNT TYPE</th>
                    <th>APPLICABLE</th>
                    <th>APPLICABLE ITEM</th>
                    <th>DISCOUNT AMOUNT</th>
                    <th>VALID FROM</th>
                    <th>VALID UPTO</th>
                    <th>STATUS</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody id="offerTableBody">
                <% if (offers && offers.length > 0) { %>
                    <% offers.forEach(offer => { %>
                        <tr>
                            <td><%= offer.offerName %></td>
                            <td><%= offer.offerType %></td>
                            <td><%= offer.applicable %></td>
                            <td><%= offer.applicableItem ? (offer.applicable === 'Product' ? offer.applicableItem.productName : offer.applicable === 'Brand' ? offer.applicableItem.name : offer.applicableItem.name) : 'N/A' %></td>
                            <td><%= offer.offerAmount %></td>
                            <td><%= new Date(offer.validFrom).toISOString().split('T')[0] %></td>
                            <td><%= new Date(offer.validUpto).toISOString().split('T')[0] %></td>
                            <td><%= offer.isListed ? 'Active' : 'Inactive' %></td>
                            <td class="actions">
                                <a class="edit" href="#" data-bs-toggle="modal" data-bs-target="#editOfferModal" onclick='openEditModal(<%- JSON.stringify(offer).replace(/'/g, "\\'") %>)'><i class="fas fa-edit"></i></a>
                                <a class="delete" href="#" onclick="confirmDeleteOffer('<%= offer._id %>')"><i class="fas fa-trash"></i></a>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="9">No offers available</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
        <% if (totalPages > 1) { %>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="/admin/offers?page=<%= currentPage - 1 %>&search=<%= searchQuery || '' %>">Previous</a>
                    </li>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="/admin/offers?page=<%= i %>&search=<%= searchQuery || '' %>"><%= i %></a>
                        </li>
                    <% } %>
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="/admin/offers?page=<%= currentPage + 1 %>&search=<%= searchQuery || '' %>">Next</a>
                    </li>
                </ul>
            </nav>
        <% } %>
    </div>

    <!-- Add Offer Modal -->
    <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="offerModalLabel">Add New Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addOfferForm">
                        <div class="mb-3">
                            <label for="addOfferName" class="form-label">Offer Name</label>
                            <input type="text" class="form-control" id="addOfferName" name="offerName" placeholder="Enter offer name">
                            <div id="add-offerName-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="addDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="addDescription" name="description" rows="5" placeholder="Enter description"></textarea>
                            <div id="add-description-error" class="error-message text-danger"></div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label for="addOfferType" class="form-label">Discount Type</label>
                                <select class="form-control" id="addOfferType" name="offerType">
                                    <option value="Percentage" selected>Percentage</option>
                                </select>
                                <div id="add-offerType-error" class="error-message text-danger"></div>
                            </div>
                            <div class="col">
                                <label for="addOfferAmount" class="form-label">Discount Amount</label>
                                <input type="number" class="form-control" id="addOfferAmount" name="offerAmount" placeholder="Enter percentage " min="0">
                                <div id="add-offerAmount-error" class="error-message text-danger"></div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label for="addValidFrom" class="form-label">Valid From</label>
                                <input type="date" class="form-control" id="addValidFrom" name="validFrom">
                                <div id="add-validFrom-error" class="error-message text-danger"></div>
                            </div>
                            <div class="col">
                                <label for="addValidUpto" class="form-label">Valid Upto</label>
                                <input type="date" class="form-control" id="addValidUpto" name="validUpto">
                                <div id="add-validUpto-error" class="error-message text-danger"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="addApplicable" class="form-label">Offer Applies To</label>
                            <select class="form-control" id="addApplicable" name="applicable">
                                <option value="Product">Product</option>
                                <option value="Category">Category</option>
                                <option value="Brand">Brand</option>
                                <option value="All Products">All Products</option>
                            </select>
                            <div id="add-applicable-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3" id="addApplicableItemContainer" style="display: none;">
                            <label for="addApplicableItem" class="form-label" id="addApplicableItemLabel">Applicable Item</label>
                            <select class="form-control" id="addApplicableItem" name="applicableItem"></select>
                            <div id="add-applicableItem-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="addStatus" class="form-label">Status</label>
                            <select class="form-control" id="addStatus" name="status">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                            <div id="add-status-error" class="error-message text-danger"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" form="addOfferForm">Create Offer</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Offer Modal -->
    <div class="modal fade" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editOfferModalLabel">Edit Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editOfferForm">
                        <input type="hidden" id="offerId" name="offerId">
                        <div class="mb-3">
                            <label for="editOfferName" class="form-label">Offer Name</label>
                            <input type="text" class="form-control" id="editOfferName" name="offerName">
                            <div id="edit-offerName-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" rows="4"></textarea>
                            <div id="edit-description-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editOfferType" class="form-label">Discount Type</label>
                            <select class="form-control" id="editOfferType" name="offerType">
                                <option value="Percentage" selected>Percentage</option>
                            </select>
                            <div id="edit-offerType-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editApplicable" class="form-label">Offer Applies To</label>
                            <select class="form-control" id="editApplicable" name="applicable">
                                <option value="Product">Product</option>
                                <option value="Category">Category</option>
                                <option value="Brand">Brand</option>
                                <option value="All Products">All Products</option>
                            </select>
                            <div id="edit-applicable-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3" id="editApplicableItemContainer" style="display: none;">
                            <label for="editApplicableItem" class="form-label" id="editApplicableItemLabel">Applicable Item</label>
                            <select class="form-control" id="editApplicableItem" name="applicableItem"></select>
                            <div id="edit-applicableItem-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editOfferAmount" class="form-label">Discount Percent</label>
                            <input type="number" class="form-control" id="editOfferAmount" name="offerAmount" min="0">
                            <div id="edit-offerAmount-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editValidFrom" class="form-label">Valid From</label>
                            <input type="date" class="form-control" id="editValidFrom" name="validFrom">
                            <div id="edit-validFrom-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editValidUpto" class="form-label">Valid Upto</label>
                            <input type="date" class="form-control" id="editValidUpto" name="validUpto">
                            <div id="edit-validUpto-error" class="error-message text-danger"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editStatus" class="form-label">Status</label>
                            <select class="form-control" id="editStatus" name="status">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                            <div id="edit-status-error" class="error-message text-danger"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" form="editOfferForm">Update</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #3D639E;
        --secondary-color: #2d4d79;
        --success-color: #28a745;
        --error-color: #dc3545;
        --text-color: #333;
        --light-bg: #f8f9fa;
        --white: #fff;
        --border-color: #ddd;
        --input-bg: #f0f0f0;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    body {
        background-color: var(--light-bg);
        color: var(--text-color);
        width: 100%;
        max-width: none;
        margin: 0;
        padding: 0;
    }

    .content {
        margin-left: 250px;
        padding: 20px;
    }

    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .header-left {
        flex: 1;
    }

    .header-right {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .content-title {
        font-size: 24px;
        color: #333;
        margin: 0;
    }

    .search-bar form {
        display: flex;
        align-items: center;
    }

    .search-container {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-bar input {
        padding: 8px 30px 8px 15px;
        border: 1px solid #ccc;
        border-radius: 20px 0 0 20px;
        width: 200px;
        outline: none;
    }

    .search-bar button {
        padding: 8px 15px;
        border: none;
        background-color: var(--primary-color);
        color: #fff;
        border-radius: 0 20px 20px 0;
        cursor: pointer;
        height: 35px;
    }

    .search-bar button:hover {
        background-color: var(--secondary-color);
    }

    .clear-search {
        position: absolute;
        right: 84px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 16px;
        color: #666;
        cursor: pointer;
        display: none;
        transition: color 0.3s ease;
    }

    .clear-search:hover {
        color: #000;
    }

    .add-offer-btn {
        background-color: var(--success-color);
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        display: flex;
        align-items: center;
        transition: background-color 0.3s ease;
    }

    .add-offer-btn:hover {
        background-color: #218838;
    }

    .table-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: var(--light-bg);
    }

    .actions a {
        margin: 0 5px;
        text-decoration: none;
        color: #fff;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 14px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .actions .edit {
        background-color: #17a2b8;
    }

    .actions .edit:hover {
        background-color: #138496;
    }

    .actions .delete {
        background-color: var(--error-color);
    }

    .actions .delete:hover {
        background-color: #c82333;
    }

    .error-message {
        color: #dc3545;
        font-size: 11px;
        display: none;
        margin-top: 5px;
    }

    .pagination .page-link {
        color: var(--primary-color);
    }

    .pagination .page-item.active .page-link {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
    }

    @media (max-width: 768px) {
        .content {
            margin-left: 0;
            padding: 10px;
        }

        .content-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .header-right {
            flex-direction: column;
            width: 100%;
            align-items: flex-start;
        }

        .search-bar input {
            width: 100%;
        }

        .table-container {
            padding: 10px;
        }

        table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }

        th, td {
            min-width: 100px;
        }
    }

    @media (max-width: 480px) {
        .content-title {
            font-size: 20px;
        }

        .search-bar input {
            padding: 6px 25px 6px 10px;
        }

        .search-bar button {
            padding: 6px 10px;
            height: 31px;
        }

        .clear-search {
            right: 74px;
            font-size: 14px;
        }

        .add-offer-btn {
            padding: 8px 15px;
            font-size: 14px;
        }

        th, td {
            padding: 8px;
            font-size: 14px;
        }

        .actions a {
            padding: 4px 8px;
            font-size: 12px;
        }
    }
</style>

<script>
$(document).ready(() => {
    // Server-provided data
    const serverData = {
        Product: <%- JSON.stringify(products.map(p => ({ id: p._id, name: p.productName }))) %>,
        Category: <%- JSON.stringify(categories.map(c => ({ id: c._id, name: c.name }))) %>,
        Brand: <%- JSON.stringify(brands.map(b => ({ id: b._id, name: b.name }))) %>,
        // 'All Products': [{ id: '', name: 'None' }]
    };

    // Initialize Flatpickr for Add Modal
    flatpickr('#addValidFrom', {
        dateFormat: 'Y-m-d',
        minDate: 'today'
    });
    flatpickr('#addValidUpto', {
        dateFormat: 'Y-m-d',
        minDate: $('#addValidFrom').val() || 'today'
    });

    // Update validUpto minDate when validFrom changes
    $('#addValidFrom').on('change', function() {
        flatpickr('#addValidUpto', {
            dateFormat: 'Y-m-d',
            minDate: $(this).val()
        });
    });

    // Initialize Flatpickr for Edit Modal
    flatpickr('#editValidFrom', {
        dateFormat: 'Y-m-d',
        minDate: 'today'
    });
    flatpickr('#editValidUpto', {
        dateFormat: 'Y-m-d',
        minDate: $('#editValidFrom').val() || 'today'
    });

    $('#editValidFrom').on('change', function() {
        flatpickr('#editValidUpto', {
            dateFormat: 'Y-m-d',
            minDate: $(this).val()
        });
    });

    // Dynamic field handling for Add Modal
    $('#addApplicable').on('change', function() {
        const selected = $(this).val();
        const $container = $('#addApplicableItemContainer');
        const $select = $('#addApplicableItem');
        const $label = $('#addApplicableItemLabel');

        $container.hide();
        $select.empty();

        if (selected && serverData[selected]) {
            $label.text(`Applicable ${selected}${selected === 'All Products' ? '' : 's'}`);
            serverData[selected].forEach(item => {
                $select.append(`<option value="${item.id}">${item.name}</option>`);
            });
            if (selected !== 'All Products') {
                $container.show();
            }
        }
    });

    // Similar logic for Edit Modal
    $('#editApplicable').on('change', function() {
        const selected = $(this).val();
        const $container = $('#editApplicableItemContainer');
        const $select = $('#editApplicableItem');
        const $label = $('#editApplicableItemLabel');

        $container.hide();
        $select.empty();

        if (selected && serverData[selected]) {
            $label.text(`Applicable ${selected}${selected === 'All Products' ? '' : 's'}`);
            serverData[selected].forEach(item => {
                $select.append(`<option value="${item.id}">${item.name}</option>`);
            });
            if (selected !== 'All Products') {
                $container.show();
            }
        }
    });

    // Open Edit Modal
    window.openEditModal = function(offer) {
        $('#offerId').val(offer._id);
        $('#editOfferName').val(offer.offerName);
        $('#editDescription').val(offer.description || '');
        $('#editOfferType').val(offer.offerType);
        $('#editApplicable').val(offer.applicable).trigger('change');
        $('#editApplicableItem').val(offer.applicableItem ? offer.applicableItem._id : '');
        $('#editOfferAmount').val(offer.offerAmount);
        $('#editValidFrom').val(new Date(offer.validFrom).toISOString().split('T')[0]);
        $('#editValidUpto').val(new Date(offer.validUpto).toISOString().split('T')[0]);
        $('#editStatus').val(offer.isListed ? 'true' : 'false');
        $('#editOfferModal').modal('show');
    };

    // Add Offer Form Submission
    $('#addOfferForm').on('submit', function(event) {
        event.preventDefault();
        if (!validateAddForm()) return;
        const formData = new FormData(this);
        const data = {
            offerName: formData.get('offerName').trim(),
            description: formData.get('description').trim(),
            offerType: formData.get('offerType'),
            applicable: formData.get('applicable'),
            applicableItem: formData.get('applicable') === 'All Products' ? '' : formData.get('applicableItem'),
            offerAmount: parseFloat(formData.get('offerAmount')) || 0,
            validFrom: formData.get('validFrom'),
            validUpto: formData.get('validUpto'),
            status: formData.get('status') === 'true'
        };
        fetch('/admin/addOffer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                $('#offerModal').modal('hide');
                Swal.fire({
                    icon: 'success',
                    text: data.message,
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => location.reload());
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: data.message });
            }
        })
        .catch(error => {
            console.error('Fetch error:', error);
            Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while adding the offer' });
        });
    });

    // Edit Offer Form Submission
    $('#editOfferForm').on('submit', function(event) {
        event.preventDefault();
        if (!validateEditForm()) return;
        const formData = new FormData(this);
        const data = {
            offerId: formData.get('offerId'),
            offerName: formData.get('offerName').trim(),
            description: formData.get('description').trim(),
            offerType: formData.get('offerType'),
            applicable: formData.get('applicable'),
            applicableItem: formData.get('applicable') === 'All Products' ? '' : formData.get('applicableItem'),
            offerAmount: parseFloat(formData.get('offerAmount')) || 0,
            validFrom: formData.get('validFrom'),
            validUpto: formData.get('validUpto'),
            status: formData.get('status') === 'true'
        };
        fetch('/admin/editOffer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                $('#editOfferModal').modal('hide');
                Swal.fire({
                    icon: 'success',
                    text: data.message,
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => location.reload());
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: data.message });
            }
        })
        .catch(error => {
            console.error('Fetch error:', error);
            Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while updating the offer' });
        });
    });

    // Delete Offer
    window.confirmDeleteOffer = function(offerId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/admin/deleteOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ offerId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: data.message,
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => location.reload());
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: data.message });
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while deleting the offer' });
                });
            }
        });
    };

    // Search Bar Functionality
    const searchInput = $('#searchInput');
    const clearSearch = $('#clearSearch');

    searchInput.on('input', function() {
        clearSearch.css('display', this.value ? 'block' : 'none');
    });

    clearSearch.on('click', () => {
        searchInput.val('');
        clearSearch.css('display', 'none');
        window.location.href = '/admin/offers';
    });

    // Form Validation
    function validateAddForm() {
        clearAddErrorMessages();
        const offerName = $('#addOfferName').val().trim();
        const description = $('#addDescription').val().trim();
        const offerType = $('#addOfferType').val();
        const applicable = $('#addApplicable').val();
        const applicableItem = $('#addApplicableItem').val();
        const offerAmount = parseFloat($('#addOfferAmount').val());
        const validFrom = $('#addValidFrom').val();
        const validUpto = $('#addValidUpto').val();
        const status = $('#addStatus').val();
        let isValid = true;

        if (offerName === '') {
            displayAddErrorMessage('add-offerName-error', 'Please enter an offer name');
            isValid = false;
        } else if (!/^[a-zA-Z\s-']+$/.test(offerName)) {
            displayAddErrorMessage('add-offerName-error', 'Offer name should contain only alphabetic characters');
            isValid = false;
        }
        if (description === '') {
            displayAddErrorMessage('add-description-error', 'Please enter a description');
            isValid = false;
        }
        if (offerType === '') {
            displayAddErrorMessage('add-offerType-error', 'Please select a discount type');
            isValid = false;
        }
        if (applicable === '') {
            displayAddErrorMessage('add-applicable-error', 'Please select where the offer applies');
            isValid = false;
        }
        if (['Product', 'Category', 'Brand'].includes(applicable) && (!applicableItem || applicableItem === '')) {
            displayAddErrorMessage('add-applicableItem-error', `Please select an applicable ${applicable.toLowerCase()}`);
            isValid = false;
        }
        if (isNaN(offerAmount) || offerAmount <= 0) {
            displayAddErrorMessage('add-offerAmount-error', 'Please enter a valid offer amount');
            isValid = false;
        }
        if (validFrom === '') {
            displayAddErrorMessage('add-validFrom-error', 'Please enter a valid from date');
            isValid = false;
        }
        if (validUpto === '') {
            displayAddErrorMessage('add-validUpto-error', 'Please enter a valid upto date');
            isValid = false;
        } else {
            const fromDate = new Date(validFrom);
            const toDate = new Date(validUpto);
            if (toDate < fromDate) {
                displayAddErrorMessage('add-validUpto-error', 'Valid upto date must be after valid from date');
                isValid = false;
            }
        }
        if (status === '') {
            displayAddErrorMessage('add-status-error', 'Please select a status');
            isValid = false;
        }
        return isValid;
    }

    function validateEditForm() {
        clearEditErrorMessages();
        const offerName = $('#editOfferName').val().trim();
        const description = $('#editDescription').val().trim();
        const offerType = $('#editOfferType').val();
        const applicable = $('#editApplicable').val();
        const applicableItem = $('#editApplicableItem').val();
        const offerAmount = parseFloat($('#editOfferAmount').val());
        const validFrom = $('#editValidFrom').val();
        const validUpto = $('#editValidUpto').val();
        const status = $('#editStatus').val();
        let isValid = true;

        if (offerName === '') {
            displayEditErrorMessage('edit-offerName-error', 'Please enter an offer name');
            isValid = false;
        } else if (!/^[a-zA-Z\s-']+$/.test(offerName)) {
            displayEditErrorMessage('edit-offerName-error', 'Offer name should contain only alphabetic characters');
            isValid = false;
        }
        if (description === '') {
            displayEditErrorMessage('edit-description-error', 'Please enter a description');
            isValid = false;
        }
        if (offerType === '') {
            displayEditErrorMessage('edit-offerType-error', 'Please select a discount type');
            isValid = false;
        }
        if (applicable === '') {
            displayEditErrorMessage('edit-applicable-error', 'Please select where the offer applies');
            isValid = false;
        }
        if (['Product', 'Category', 'Brand'].includes(applicable) && (!applicableItem || applicableItem === '')) {
            displayEditErrorMessage('edit-applicableItem-error', `Please select an applicable ${applicable.toLowerCase()}`);
            isValid = false;
        }
        if (isNaN(offerAmount) || offerAmount <= 0) {
            displayEditErrorMessage('edit-offerAmount-error', 'Please enter a valid offer amount');
            isValid = false;
        }

        if ( offerAmount < 25) {
            displayEditErrorMessage('edit-offerAmount-error', 'Cannot add more than 25%');
            isValid = false;
        }

        if (validFrom === '') {
            displayEditErrorMessage('edit-validFrom-error', 'Please select a valid from date');
            isValid = false;
        }
        if (validUpto === '') {
            displayEditErrorMessage('edit-validUpto-error', 'Please select a valid upto date');
            isValid = false;
        } else if (new Date(validUpto) < new Date(validFrom)) {
            displayEditErrorMessage('edit-validUpto-error', 'Valid upto date must be after valid from date');
            isValid = false;
        }
        if (status === '') {
            displayEditErrorMessage('edit-status-error', 'Please select a status');
            isValid = false;
        }
        return isValid;
    }

    function displayAddErrorMessage(elementId, message) {
        $(`#${elementId}`).text(message).show();
    }

    function displayEditErrorMessage(elementId, message) {
        $(`#${elementId}`).text(message).show();
    }

    function clearAddErrorMessages() {
        $('#offerModal .error-message').text('').hide();
    }

    function clearEditErrorMessages() {
        $('#editOfferModal .error-message').text('').hide();
    }

    // Reset Add Modal Form on Close
    $('#offerModal').on('hidden.bs.modal', function() {
        clearAddErrorMessages();
        $('#addOfferForm')[0].reset();
        $('#addApplicableItemContainer').hide();
        $('#addApplicableItem').empty();
    });

    // Reset Edit Modal Form on Close
    $('#editOfferModal').on('hidden.bs.modal', function() {
        clearEditErrorMessages();
        $('#editOfferForm')[0].reset();
        $('#editApplicableItemContainer').hide();
        $('#editApplicableItem').empty();
    });
});
</script>

<%- include('../../views/partials/admin/footer') %>