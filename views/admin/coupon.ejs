<%- include('../../views/partials/admin/header') %>
<style>
    .content {
        margin-left: 250px;
        padding: 20px;
    }
    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .header-left {
        flex: 1;
    }
    .header-right {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .content-title {
        font-size: 24px;
        color: #333;
        margin: 0;
    }
    .search-bar form {
        display: flex;
        align-items: center;
    }
    .search-container {
        position: relative;
        display: flex;
        align-items: center;
    }
    .search-bar input {
        padding: 8px 30px 8px 15px; /* Ensure enough padding on the right for the "X" */
        border: 1px solid #ccc;
        border-radius: 20px 0 0 20px;
        width: 200px;
        outline: none;
    }
    .search-bar button {
        padding: 8px 15px;
        border: none;
        background-color: #3D639E;
        color: #fff;
        border-radius: 0 20px 20px 0;
        cursor: pointer;
        height: 35px; /* Match the height of the input for better alignment */
    }
    .search-bar button:hover {
        background-color: #2d4d79;
    }
    .clear-search {
        position: absolute;
        right: 84px; /* Position the "X" inside the input, just before the button */
        top: 50%;
        transform: translateY(-50%); /* Vertically center the "X" within the input */
        font-size: 16px;
        color: #666;
        cursor: pointer;
        display: none; /* Hidden by default */
        transition: color 0.3s ease;
    }
    .clear-search:hover {
        color: #000;
    }
    .add-coupon-btn {
        background-color: #28a745;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        display: flex;
        align-items: center;
        transition: background-color 0.3s ease;
    }
    .add-coupon-btn:hover {
        background-color: #218838;
    }
    .table-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #f8f9fa;
    }
    td.text-start {
        text-align: left;
    }
    .actions a {
        margin: 0 5px;
        text-decoration: none;
        color: #fff;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 14px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .actions .edit {
        background-color: #17a2b8;
    }
    .actions .edit:hover {
        background-color: #138496;
    }
    .actions .delete {
        background-color: #dc3545;
    }
    .actions .delete:hover {
        background-color: #c82333;
    }
    td:nth-child(3) {
        padding: 5px;
    }
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        width: 400px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        position: relative;
    }
    .modal-content h2 {
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 20px;
        color: #333;
        text-align: left;
    }
    .modal-content form div {
        margin-bottom: 15px;
        text-align: left;
    }
    .modal-content label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
        color: #333;
        font-size: 14px;
    }
    .modal-input {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f0f0f0;
        outline: none;
        box-sizing: border-box;
        font-size: 13px;
    }
    .modal-input-textarea {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f0f0f0;
        outline: none;
        box-sizing: border-box;
        font-size: 13px;
        resize: vertical;
        min-height: 80px;
    }
    .button-group {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }
    .modal-btn {
        background-color: #28a745;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        font-size: 14px;
        text-transform: uppercase;
        transition: background-color 0.3s ease;
        flex: 1;
        max-width: 120px;
    }
    .modal-btn:hover {
        background-color: #218838;
    }
    .cancel-btn {
        background-color: #6c757d;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        font-size: 14px;
        text-transform: uppercase;
        transition: background-color 0.3s ease;
        flex: 1;
        max-width: 120px;
    }
    .cancel-btn:hover {
        background-color: #5a6268;
    }
    .close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 20px;
        font-weight: bold;
        cursor: pointer;
        color: #666;
        transition: color 0.3s ease;
    }
    .close:hover {
        color: #000;
    }
    .error-message {
        color: red;
        font-size: 11px;
        display: none;
        margin-top: 5px;
    }
</style>
</head>
<body>
    <div class="content">
        <div class="content-header">
            <div class="header-left">
                <h2 class="content-title">Coupons</h2>
            </div>
            <div class="header-right">
                <div class="search-bar">
                    <form action="/admin/coupon" method="get" id="searchForm">
                        <div class="search-container">
                            <input type="text" name="search" id="searchInput" placeholder="Search coupons" value="<%= searchTerm || '' %>">
                            <span id="clearSearch" class="clear-search">×</span>
                            <button type="submit">Search</button>
                        </div>
                    </form>
                </div>
                <button class="add-coupon-btn">ADD Coupon +</button>
            </div>
        </div>
        
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>COUPON NAME</th>
                        <th>COUPON CODE</th>
                        <th>MIN CART VALUE</th>
                        <th>COUPON AMOUNT</th>
                        <th>VALID FROM</th>
                        <th>VALID UPTO</th>
                        <th>ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    <% coupons.forEach(coupon => { %>
                        <tr>
                            <td><%= coupon.name %></td>
                            <td><%= coupon.code %></td>
                            <td><%= coupon.minCartValue %></td>
                            <td><%= coupon.amount %></td>
                            <td><%= new Date(coupon.validFrom).toISOString().split('T')[0] %></td>
                            <td><%= new Date(coupon.validUpto).toISOString().split('T')[0] %></td>
                            <td class="actions">
                                <a class="edit" onclick='openEditModal(<%- JSON.stringify(coupon).replace(/'/g, "\\'") %>)'><i class="fas fa-edit"></i></a>
                                <a class="delete" onclick="confirmDeleteCoupon('<%= coupon._id %>')"><i class="fas fa-trash"></i></a>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Coupon Modal -->
    <div id="addCouponModal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Add Coupon</h2>
            <form id="addCouponForm" onsubmit="return handleAddFormSubmit(event)">
                <div>
                    <label for="addCouponName">Coupon Name:</label>
                    <input type="text" id="addCouponName" name="name" class="modal-input">
                    <div id="add-name-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addCouponDescription">Description:</label>
                    <textarea id="addCouponDescription" name="description" class="modal-input-textarea"></textarea>
                    <div id="add-description-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addCouponCode">Coupon Code:</label>
                    <input type="text" id="addCouponCode" name="code" class="modal-input">
                    <div id="add-code-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addMinCartValue">Min Cart Value:</label>
                    <input type="number" id="addMinCartValue" name="minCartValue" class="modal-input" min="0">
                    <div id="add-minCartValue-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addCouponAmount">Coupon Amount:</label>
                    <input type="number" id="addCouponAmount" name="amount" class="modal-input" min="0">
                    <div id="add-amount-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addValidFrom">Valid From:</label>
                    <input type="date" id="addValidFrom" name="validFrom" class="modal-input" min="2025-05-16">
                    <div id="add-validFrom-error" class="error-message"></div>
                </div>
                <div>
                    <label for="addValidUpto">Valid: </label>
                    <input type="date" id="addValidUpto" name="validUpto" class="modal-input" min="2025-05-16">
                    <div id="add-validUpto-error" class="error-message"></div>
                </div>
                <div class="button-group">
                    <button type="button" class="cancel-btn">CANCEL</button>
                    <button type="submit" class="modal-btn">ADD</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Coupon Modal -->
    <div id="editCouponModal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Edit Coupon</h2>
            <form id="editCouponForm" onsubmit="return handleEditFormSubmit(event)">
                <input type="hidden" id="couponId" name="couponId">
                <div>
                    <label for="editCouponName">Coupon Name:</label>
                    <input type="text" id="editCouponName" name="name" class="modal-input">
                    <div id="edit-name-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editCouponDescription">Description:</label>
                    <textarea id="editCouponDescription" name="description" class="modal-input-textarea"></textarea>
                    <div id="edit-description-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editCouponCode">Coupon Code:</label>
                    <input type="text" id="editCouponCode" name="code" class="modal-input">
                    <div id="edit-code-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editMinCartValue">Min Cart Value:</label>
                    <input type="number" id="editMinCartValue" name="minCartValue" class="modal-input" min="0">
                    <div id="edit-minCartValue-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editCouponAmount">Coupon Amount:</label>
                    <input type="number" id="editCouponAmount" name="amount" class="modal-input" min="0">
                    <div id="edit-amount-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editValidFrom">Valid From:</label>
                    <input type="date" id="editValidFrom" name="validFrom" class="modal-input" min="2025-05-16">
                    <div id="edit-validFrom-error" class="error-message"></div>
                </div>
                <div>
                    <label for="editValidUpto">Valid Upto:</label>
                    <input type="date" id="editValidUpto" name="validUpto" class="modal-input" min="2025-05-16">
                    <div id="edit-validUpto-error" class="error-message"></div>
                </div>
                <div class="button-group">
                    <button type="button" class="cancel-btn">CANCEL</button>
                    <button type="submit" class="modal-btn">UPDATE</button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Add Coupon Modal
        const addModal = document.getElementById("addCouponModal");
        const addBtn = document.querySelector(".add-coupon-btn");
        const addSpan = document.querySelector("#addCouponModal .close");
        const addCancelBtn = document.querySelector("#addCouponModal .cancel-btn");

        addBtn.addEventListener("click", function() {
            addModal.style.display = "flex";
        });

        addSpan.addEventListener("click", function() {
            addModal.style.display = "none";
        });

        addCancelBtn.addEventListener("click", function() {
            addModal.style.display = "none";
        });

        window.addEventListener("click", function(event) {
            if (event.target == addModal) {
                addModal.style.display = "none";
            }
        });

        // Edit Coupon Modal
        const editModal = document.getElementById("editCouponModal");
        const editSpan = document.querySelector("#editCouponModal .close");
        const editCancelBtn = document.querySelector("#editCouponModal .cancel-btn");

        editSpan.addEventListener("click", function() {
            editModal.style.display = "none";
        });

        editCancelBtn.addEventListener("click", function() {
            editModal.style.display = "none";
        });

        window.addEventListener("click", function(event) {
            if (event.target == editModal) {
                editModal.style.display = "none";
            }
        });

        function openEditModal(coupon) {
            document.getElementById("couponId").value = coupon._id;
            document.getElementById("editCouponName").value = coupon.name;
            document.getElementById("editCouponDescription").value = coupon.description || '';
            document.getElementById("editCouponCode").value = coupon.code;
            document.getElementById("editMinCartValue").value = coupon.minCartValue;
            document.getElementById("editCouponAmount").value = coupon.amount;
            document.getElementById("editValidFrom").value = new Date(coupon.validFrom).toISOString().split('T')[0];
            document.getElementById("editValidUpto").value = new Date(coupon.validUpto).toISOString().split('T')[0];
            editModal.style.display = "flex";
        }

        function handleAddFormSubmit(event) {
            event.preventDefault();
            if (!validateAddForm()) {
                return false;
            }
            const form = document.getElementById("addCouponForm");
            const formData = new FormData(form);
            const data = {
                name: formData.get('name').trim(),
                description: formData.get('description').trim(),
                code: formData.get('code').trim(),
                minCartValue: parseFloat(formData.get('minCartValue')) || 0,
                amount: parseFloat(formData.get('amount')) || 0,
                validFrom: formData.get('validFrom'),
                validUpto: formData.get('validUpto')
            };
            fetch('/admin/addCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        console.log('Raw response:', text);
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    addModal.style.display = "none";
                    Swal.fire({
                        icon: "success",
                        text: data.message,
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops",
                        text: data.error
                    });
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: error.message || "An error occurred while adding the coupon"
                });
            });
            return false;
        }

        function handleEditFormSubmit(event) {
            event.preventDefault();
            if (!validateEditForm()) {
                return false;
            }
            const form = document.getElementById("editCouponForm");
            const formData = new FormData(form);
            const data = {
                couponId: formData.get('couponId'),
                name: formData.get('name').trim(),
                description: formData.get('description').trim(),
                code: formData.get('code').trim(),
                minCartValue: parseFloat(formData.get('minCartValue')) || 0,
                amount: parseFloat(formData.get('amount')) || 0,
                validFrom: formData.get('validFrom'),
                validUpto: formData.get('validUpto')
            };
            console.log('Sending data:', data);
            fetch('/admin/editCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    editModal.style.display = "none";
                    Swal.fire({
                        icon: "success",
                        text: data.message,
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops",
                        text: data.error
                    });
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                Swal.fire({
                    icon: "error",
                    title: "Oops",
                    text: "An error occurred while updating the coupon"
                });
            });
            return false;
        }

        function validateAddForm() {
            clearAddErrorMessages();
            const name = document.getElementById("addCouponName").value.trim();
            const description = document.getElementById("addCouponDescription").value.trim();
            const code = document.getElementById("addCouponCode").value.trim();
            const minCartValue = parseFloat(document.getElementById("addMinCartValue").value);
            const amount = parseFloat(document.getElementById("addCouponAmount").value);
            const validFrom = document.getElementById("addValidFrom").value;
            const validUpto = document.getElementById("addValidUpto").value;
            const today = new Date('2025-05-16'); // Current date
            let isValid = true;

            if (name === "") {
                displayAddErrorMessage("add-name-error", "Please enter a coupon name");
                isValid = false;
            } else if (!/^[a-zA-Z\s-']+$/.test(name)) {
                displayAddErrorMessage("add-name-error", "Coupon name should contain only alphabetic characters");
                isValid = false;
            }
            if (description === "") {
                displayAddErrorMessage("add-description-error", "Please enter a description");
                isValid = false;
            } else if (description.length > 200) {
                displayAddErrorMessage("add-description-error", "Description must be 200 characters or less");
                isValid = false;
            }
            if (code === "") {
                displayAddErrorMessage("add-code-error", "Please enter a coupon code");
                isValid = false;
            } else if (!/^[A-Z0-9]+$/.test(code)) {
                displayAddErrorMessage("add-code-error", "Coupon code should contain only uppercase letters and numbers");
                isValid = false;
            }
            if (isNaN(minCartValue) || minCartValue < 0) {
                displayAddErrorMessage("add-minCartValue-error", "Please enter a valid minimum cart value");
                isValid = false;
            }
            if (isNaN(amount) || amount <= 0) {
                displayAddErrorMessage("add-amount-error", "Please enter a valid coupon amount");
                isValid = false;
            }
            // Validation: Coupon amount should not exceed min cart value
            if (!isNaN(minCartValue) && !isNaN(amount) && amount > minCartValue) {
                displayAddErrorMessage("add-amount-error", "Coupon amount cannot exceed minimum cart value");
                isValid = false;
            }
            // New validation: Coupon amount should not be equal to min cart value
            if (!isNaN(minCartValue) && !isNaN(amount) && amount === minCartValue) {
                displayAddErrorMessage("add-amount-error", "Coupon amount cannot be equal to minimum cart value");
                isValid = false;
            }
            if (validFrom === "") {
                displayAddErrorMessage("add-validFrom-error", "Please select a valid from date");
                isValid = false;
            } else if (new Date(validFrom) < today) {
                displayAddErrorMessage("add-validFrom-error", "Valid from date cannot be in the past");
                isValid = false;
            }
            if (validUpto === "") {
                displayAddErrorMessage("add-validUpto-error", "Please select a valid upto date");
                isValid = false;
            } else if (new Date(validUpto) < today) {
                displayAddErrorMessage("add-validUpto-error", "Valid upto date cannot be in the past");
                isValid = false;
            } else if (new Date(validUpto) < new Date(validFrom)) {
                displayAddErrorMessage("add-validUpto-error", "Valid upto date must be after valid from date");
                isValid = false;
            }
            return isValid;
        }

        function validateEditForm() {
            clearEditErrorMessages();
            const name = document.getElementById("editCouponName").value.trim();
            const description = document.getElementById("editCouponDescription").value.trim();
            const code = document.getElementById("editCouponCode").value.trim();
            const minCartValue = parseFloat(document.getElementById("editMinCartValue").value);
            const amount = parseFloat(document.getElementById("editCouponAmount").value);
            const validFrom = document.getElementById("editValidFrom").value;
            const validUpto = document.getElementById("editValidUpto").value;
            const today = new Date('2025-05-16'); // Current date
            let isValid = true;

            if (name === "") {
                displayEditErrorMessage("edit-name-error", "Please enter a coupon name");
                isValid = false;
            } else if (!/^[a-zA-Z\s-']+$/.test(name)) {
                displayEditErrorMessage("edit-name-error", "Coupon name should contain only alphabetic characters");
                isValid = false;
            }
            if (description === "") {
                displayEditErrorMessage("edit-description-error", "Please enter a description");
                isValid = false;
            } else if (description.length > 200) {
                displayEditErrorMessage("edit-description-error", "Description must be 200 characters or less");
                isValid = false;
            }
            if (code === "") {
                displayEditErrorMessage("edit-code-error", "Please enter a coupon code");
                isValid = false;
            } else if (!/^[A-Z0-9]+$/.test(code)) {
                displayEditErrorMessage("edit-code-error", "Coupon code should contain only uppercase letters and numbers");
                isValid = false;
            }
            if (isNaN(minCartValue) || minCartValue < 0) {
                displayEditErrorMessage("edit-minCartValue-error", "Please enter a valid minimum cart value");
                isValid = false;
            }
            if (isNaN(amount) || amount <= 0) {
                displayEditErrorMessage("edit-amount-error", "Please enter a valid coupon amount");
                isValid = false;
            }
            // Validation: Coupon amount should not exceed min cart value
            if (!isNaN(minCartValue) && !isNaN(amount) && amount > minCartValue) {
                displayEditErrorMessage("edit-amount-error", "Coupon amount cannot exceed minimum cart value");
                isValid = false;
            }
            // New validation: Coupon amount should not be equal to min cart value
            if (!isNaN(minCartValue) && !isNaN(amount) && amount === minCartValue) {
                displayEditErrorMessage("edit-amount-error", "Coupon amount cannot be equal to minimum cart value");
                isValid = false;
            }
            if (validFrom === "") {
                displayEditErrorMessage("edit-validFrom-error", "Please select a valid from date");
                isValid = false;
            } else if (new Date(validFrom) < today) {
                displayEditErrorMessage("edit-validFrom-error", "Valid from date cannot be in the past");
                isValid = false;
            }
            if (validUpto === "") {
                displayEditErrorMessage("edit-validUpto-error", "Please select a valid upto date");
                isValid = false;
            } else if (new Date(validUpto) < today) {
                displayEditErrorMessage("edit-validUpto-error", "Valid upto date cannot be in the past");
                isValid = false;
            } else if (new Date(validUpto) < new Date(validFrom)) {
                displayEditErrorMessage("edit-validUpto-error", "Valid upto date must be after valid from date");
                isValid = false;
            }
            return isValid;
        }

        function displayAddErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function displayEditErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearAddErrorMessages() {
            const errorElements = document.querySelectorAll("#addCouponModal .error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
        }

        function clearEditErrorMessages() {
            const errorElements = document.querySelectorAll("#editCouponModal .error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
        }

        function confirmDeleteCoupon(couponId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/deleteCoupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ couponId })
                    })
                    .then(response => {
                        console.log('Response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response data:', data);
                        if (data.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Deleted!",
                                text: data.message,
                                timer: 1500,
                                showConfirmButton: false
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: data.error
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "An error occurred while deleting the coupon"
                        });
                    });
                }
            });
        }

        // Search bar clear functionality
        const searchInput = document.getElementById('searchInput');
        const clearSearch = document.getElementById('clearSearch');

        // Show/hide the "X" based on input value
        searchInput.addEventListener('input', function() {
            clearSearch.style.display = this.value ? 'block' : 'none';
        });

        // Clear the search input and reload the page without the search query
        clearSearch.addEventListener('click', function() {
            searchInput.value = '';
            clearSearch.style.display = 'none';
            window.location.href = '/admin/coupon'; // Reload without search query
        });

        // Show the "X" on page load if there's a search term
        if (searchInput.value) {
            clearSearch.style.display = 'block';
        }
    </script>
</body>
</html>
<%- include('../../views/partials/admin/footer') %>