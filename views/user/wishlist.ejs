<%- include('../../views/partials/user/header') %>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  .container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 0 15px;
  }

  .wishlist-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }

  .wishlist-table th, .wishlist-table td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .wishlist-table th {
    background-color: #f5f5f5;
  }

  .item-details {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .wishlist-table img {
    width: 50px;
    height: 50px;
    object-fit: contain;
    vertical-align: middle;
  }

  .item-info {
    flex: 1;
  }

  .item-name {
    font-weight: bold;
    font-size: 16px;
  }

  .item-name a {
    color: #212529;
    text-decoration: none;
  }

  .item-name a:hover {
    color: #05445E;
    text-decoration: underline;
  }

  .item-price {
    font-weight: bold;
    font-size: 18px;
    color: #212529;
  }

  .item-remove {
    text-align: center;
  }

  .remove-btn {
    width: 25px;
    height: 25px;
    background-color: #05445E;
    color: white;
    border: none;
    border-radius: 2px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
  }

  .remove-btn:hover {
    background-color: #5d7dad;
  }

  .add-to-cart {
    background-color: #2ecc71;
    color: white;
    border: none;
    border-radius: 50px;
    padding: 8px 15px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
    width: 120px;
    margin: 0 auto;
    display: block;
  }

  .add-to-cart:hover {
    background-color: #27ae60;
  }

  .out-of-stock {
    color: #dc3545;
    font-weight: bold;
  }

  .empty-wishlist-container {
    text-align: center;
    padding: 40px;
    background-color: #f8f9fa;
    border-radius: 10px;
    margin-top: 20px;
  }

  .empty-wishlist-container p {
    font-size: 18px;
    color: #333;
    margin-bottom: 20px;
  }

  .shop-btn {
    padding: 10px 20px;
    background-color: #05445E;
    color: white;
    text-decoration: none;
    border-radius: 5px;
  }

  .shop-btn:hover {
    background-color: #03384d;
  }

  /* Responsive Styles */
  @media (max-width: 768px) {
    .wishlist-table thead {
      display: none;
    }

    .wishlist-table tbody tr {
      display: block;
      padding: 15px;
      border-bottom: 1px solid #ddd;
      margin-bottom: 15px;
      background-color: #fff;
    }

    .wishlist-table td {
      display: block;
      text-align: center;
      padding: 8px 0;
      border-bottom: none;
    }

    .wishlist-table td:before {
      content: attr(data-label);
      font-weight: bold;
      display: block;
      margin-bottom: 5px;
      color: #555;
    }

    .item-details {
      flex-direction: column;
      align-items: center;
      gap: 10px;
      text-align: center;
    }

    .wishlist-table img {
      margin: 0 auto 10px;
    }

    .item-remove {
      text-align: center;
      margin-bottom: 10px;
    }

    .add-to-cart,
    .out-of-stock {
      margin-top: 10px;
    }
  }
  .original-price { text-decoration: line-through; color: #666; }
.discounted-price { color: #e74c3c; }
.offer-badge { background: #e74c3c; color: #fff; padding: 2px 6px; border-radius: 3px; font-size: 0.7rem; }
</style>

<div class="container">
  <h2>Your Wishlist</h2>
  <% if (wishlistItems.length === 0) { %>
    <div class="empty-wishlist-container">
      <p>Your wishlist is empty.</p>
      <a href="/shop" class="shop-btn">Go to Shop</a>
    </div>
  <% } else { %>
    <table class="wishlist-table">
      <thead>
        <tr>
          <th></th>
          <th>Product</th>
          <th>Price</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="wishlistBody">
        <% wishlistItems.forEach(item => { %>
          <tr class="cart-item" data-product-id="<%= item.productId._id %>">
            <td data-label="Remove" class="item-remove">
              <button class="remove-btn" onclick="removeFromWishlist('<%= item.productId._id %>', this)">✕</button>
            </td>
            <td data-label="Product">
              <div class="item-details">
                <img src="/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="item-image">
                <div class="item-info">
                  <h3 class="item-name">
                    <a href="/productDetails?id=<%= item.productId._id %>"><%= item.productId.productName %></a>
                  </h3>
                </div>
              </div>
            </td>
<td data-label="Price" class="item-price">
  <% if (item.offerDetails && item.offerDetails.offer.discount > 0) { %>
    <span class="original-price">₹<%= item.productId.salePrice.toLocaleString('en-IN') %></span>
    <span class="discounted-price">₹<%= item.offerDetails.discountedPrice.toLocaleString('en-IN') %></span>
    <span class="offer-badge"><%= item.offerDetails.offer.discount %>% OFF</span>
  <% } else { %>
    ₹<%= item.productId.salePrice.toLocaleString('en-IN') %>
  <% } %>
</td>
            <td data-label="Action" class="cart-action">
              <% if (item.productId.quantity > 0) { %>
                <button class="add-to-cart" onclick="addToCart('<%= item.productId._id %>', this)">Add to Cart</button>
              <% } else { %>
                <span class="out-of-stock">Out of Stock</span>
              <% } %>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  <% } %>
</div>

<script>
  function removeFromWishlist(productId, button) {
    fetch('/removeFromWishlist', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const row = button.closest('tr');
        row.style.transition = 'opacity 0.5s ease';
        row.style.opacity = '0';
        setTimeout(() => {
          row.remove();
          if (document.querySelectorAll('.cart-item').length === 0) {
            const container = document.querySelector('.container');
            container.innerHTML = `
              <h2>Your Wishlist</h2>
              <div class="empty-wishlist-container">
                <p>Your wishlist is empty.</p>
                <a href="/shop" class="shop-btn">Go to Shop</a>
              </div>
            `;
          }
        }, 500);
        Swal.fire({
          icon: 'success',
          title: 'Removed',
          text: 'Product removed from wishlist!',
          timer: 1500,
          showConfirmButton: false
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to remove from wishlist',
          timer: 1500,
          showConfirmButton: false
        });
      }
    })
    .catch(error => {
      console.error('Fetch error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while removing from wishlist',
        timer: 2000,
        showConfirmButton: false
      });
    });
  }

  function addToCart(productId, button) {
    // First, add the product to the cart
    fetch('/addToCart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Show "Added!" feedback on the button
        const originalText = button.textContent;
        button.textContent = 'Added!';
        button.style.backgroundColor = '#28a745';
        setTimeout(() => {
          button.textContent = originalText;
          button.style.backgroundColor = '#2ecc71';
        }, 2000);

        // Now, remove the product from the wishlist
        fetch('/removeFromWishlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId }),
        })
        .then(response => response.json())
        .then(removeData => {
          if (removeData.success) {
            // Remove the row from the UI
            const row = button.closest('tr');
            row.style.transition = 'opacity 0.5s ease';
            row.style.opacity = '0';
            setTimeout(() => {
              row.remove();
              if (document.querySelectorAll('.cart-item').length === 0) {
                const container = document.querySelector('.container');
                container.innerHTML = `
                  <h2>Your Wishlist</h2>
                  <div class="empty-wishlist-container">
                    <p>Your wishlist is empty.</p>
                    <a href="/shop" class="shop-btn">Go to Shop</a>
                  </div>
                `;
              }
            }, 500);

            // Show success message and redirect to cart
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Product added to cart',
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              window.location.href = '/cart';
            });

            // Note: The remainingStock check is commented out in cartController.js, so we won't use it
            // If you uncomment the stock management in cartController.js, you can re-enable this:
            // if (data.remainingStock === 0) {
            //   button.replaceWith('<span class="out-of-stock">Out of Stock</span>');
            // }
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: removeData.message || 'Failed to remove from wishlist',
              timer: 1500,
              showConfirmButton: false
            });
          }
        })
        .catch(error => {
          console.error('Fetch error during wishlist removal:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while removing from wishlist',
            timer: 2000,
            showConfirmButton: false
          });
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to add to cart',
          timer: 1500,
          showConfirmButton: false
        });
      }
    })
    .catch(error => {
      console.error('Fetch error during add to cart:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while adding to cart',
        timer: 2000,
        showConfirmButton: false
      });
    });
  }
</script>

<%- include('../../views/partials/user/footer') %>