<%- include('../../views/partials/user/header') %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&family=Bebas+Neue&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Montserrat', sans-serif;
      line-height: 1.6;
      color: #333;
      background-color: #f5f5f5;
    }
    main, main * {
      font-family: 'Montserrat', sans-serif;
    }
    .main {
      padding: 30px 0;
      min-height: calc(100vh - 150px);
    }
    .account-container {
      max-width: 1200px;
      margin: 40px auto;
      background: #fff;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
      display: flex;
    }
    .sidebar {
      width: 20%;
      background: #fff;
      padding: 20px;
      border-right: 1px solid #ddd;
    }
    .sidebar ul {
      list-style: none;
    }
    .sidebar ul li {
      margin-bottom: 10px;
    }
    .sidebar ul li a {
      text-decoration: none;
      color: #666;
      font-size: 1rem;
      display: flex;
      align-items: center;
      padding: 15px;
      border-radius: 5px;
      transition: background-color 0.3s, color 0.3s;
      position: relative;
    }
    .sidebar ul li a i {
      margin-right: 10px;
      font-size: 1.1rem;
      color: #666;
      transition: color 0.3s;
    }
    .sidebar ul li a.active {
      color: #05445E;
      font-weight: 500;
    }
    .sidebar ul li a.active i {
      color: #05445E;
    }
    .sidebar ul li a.active::before {
      content: '';
      position: absolute;
      left: 0;
      top: 10px;
      bottom: 10px;
      width: 4px;
      background-color: #05445E;
      border-radius: 0 5px 5px 0;
    }
    .sidebar ul li a:hover {
      background-color: #f1f3f6;
      color: #05445E;
    }
    .sidebar ul li a:hover i {
      color: #05445E;
    }
    .main-content {
      padding: 40px;
      flex: 1;
    }
    .greeting {
      font-size: 1.8rem;
      font-weight: 500;
      color: #333;
      margin-bottom: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
    }
    .greeting .button-group {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .back-btn {
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
      letter-spacing: 1px;
      background-color: #05445E;
      color: #fff;
      text-decoration: none;
      display: flex;
      align-items: center;
    }
    .back-btn:hover {
      background-color: #043b52;
    }
    .action-btn {
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
      letter-spacing: 1px;
      background-color: #d32f2f;
      color: #fff;
      text-decoration: none;
      display: flex;
      align-items: center;
    }
    .action-btn:hover {
      background-color: #b02828;
    }
    .order-summary {
      background: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 20px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }
    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 15px;
    }
    .order-id {
      font-size: 1rem;
      font-weight: 500;
      color: #333;
    }
    .order-status-container {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 8px;
    }
    .order-status {
      font-size: 0.9rem;
      font-weight: 500;
    }
    .status-delivered {
      color: #388e3c;
    }
    .status-pending {
      color: #f9a825;
    }
    .status-canceled {
      color: #d32f2f;
    }
    .status-processing,
    .status-shipped {
      color: #0288d1;
    }
    .status-returnrequest {
      color: #ff9800;
    }
    .status-returned {
      color: #ff9800;
    }
    .order-meta {
      display: flex;
      gap: 20px;
      font-size: 0.9rem;
      color: #666;
    }
    .order-meta p {
      margin-bottom: 5px;
    }
    .return-btn {
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
      letter-spacing: 1px;
      background-color: #ff9800;
      color: #fff;
      text-decoration: none;
    }
    .return-btn:hover {
      background-color: #e68900;
    }
    .product-list {
      margin-bottom: 20px;
    }
    .product-item {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px;
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-bottom: 10px;
    }
    .product-image {
      width: 60px;
      height: 60px;
      flex-shrink: 0;
    }
    .product-image img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 4px;
    }
    .product-details {
      flex: 1;
    }
    .product-name {
      font-size: 1rem;
      font-weight: 500;
      color: #333;
      margin-bottom: 5px;
    }
    .product-meta {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 5px;
    }
    .product-actions {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 10px;
    }
    .product-subtotal {
      font-size: 1rem;
      font-weight: 500;
      color: #333;
    }
    .product-status {
      font-size: 0.9rem;
      font-weight: 500;
    }
    .cancel-product-btn {
      padding: 6px 12px;
      border: none;
      border-radius: 5px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: background-color 0.3s;
      letter-spacing: 1px;
      background-color: #d32f2f;
      color: #fff;
      text-decoration: none;
    }
    .cancel-product-btn:hover {
      background-color: #b02828;
    }
    .total-payment {
      padding: 15px;
      background: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-bottom: 20px;
    }
    .total-payment h3 {
      font-size: 1.1rem;
      font-weight: 500;
      color: #333;
      margin-bottom: 10px;
    }
    .total-payment p {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 5px;
    }
    .total-payment .final-amount {
      font-size: 1rem;
      font-weight: 500;
      color: #333;
    }
    .shipping-address {
      padding: 15px;
      background: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
    .shipping-address h3 {
      font-size: 1.1rem;
      font-weight: 500;
      color: #333;
      margin-bottom: 10px;
    }
    .shipping-address p {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 5px;
    }
    @media (max-width: 768px) {
      .account-container {
        flex-direction: column;
      }
      .sidebar {
        width: 100%;
        border-right: none;
        border-bottom: 1px solid #ddd;
      }
      .main-content {
        padding: 20px;
      }
      .order-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .order-status-container {
        align-items: flex-start;
      }
      .order-meta {
        flex-direction: column;
        gap: 5px;
      }
      .product-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .product-actions {
        flex-direction: row;
        align-items: center;
        width: 100%;
        justify-content: flex-end;
        flex-wrap: wrap;
      }
    }
    @media (max-width: 480px) {
      .greeting {
        font-size: 1.5rem;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .greeting .button-group {
        flex-direction: column;
        width: 100%;
      }
      .back-btn, .action-btn, .return-btn {
        font-size: 0.8rem;
        padding: 6px 12px;
      }
      .order-id, .product-name, .final-amount {
        font-size: 0.9rem;
      }
      .order-status, .product-meta, .total-payment p, .shipping-address p, .product-status {
        font-size: 0.8rem;
      }
      .sidebar ul li a {
        font-size: 0.9rem;
        padding: 10px;
      }
      .sidebar ul li a i {
        font-size: 1rem;
      }
      .cancel-product-btn {
        font-size: 0.7rem;
        padding: 5px 10px;
      }
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      position: relative;
      text-align: center;
    }
    .modal-content h2 {
      font-size: 1.3rem;
      font-weight: 500;
      color: #05445E;
      margin-bottom: 15px;
    }
    .modal-content p {
      font-size: 0.9rem;
      color: #666;
      margin-bottom: 20px;
    }
    .modal-content .close {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 1.5rem;
      font-weight: bold;
      cursor: pointer;
      color: #333;
      transition: color 0.3s;
    }
    .modal-content .close:hover {
      color: #05445E;
    }
    .modal-content .button-group {
      display: flex;
      gap: 10px;
      justify-content: center;
    }
    .modal-content button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
      min-width: 120px;
    }
    .modal-content .download-btn {
      background-color: #05445E;
      color: #fff;
    }
    .modal-content .download-btn:hover {
      background-color: #043b52;
    }
    .modal-content .cancel-btn {
      background-color: #6c757d;
      color: #fff;
    }
    .modal-content .cancel-btn:hover {
      background-color: #5a6268;
    }
  </style>
</head>
<body>
  <main class="main">
    <section class="pt-10 pb-10">
      <div class="container">
        <div class="row">
          <div class="col-lg-10 m-auto">
            <div class="account-container">
              <div class="sidebar">
                <ul>
                  <li><a href="/userProfile"><i class="fa-solid fa-user"></i> My Profile</a></li>
                  <li><a href="/address"><i class="fa-solid fa-map-marker-alt"></i> My Addresses</a></li>
                  <li><a href="/orderListing" class="active"><i class="fa-solid fa-shopping-bag"></i> My Orders</a></li>
                  <li><a href="/wallet"><i class="fa-solid fa-wallet"></i> Wallet</a></li>
                  <!-- <li><a href="#"><i class="fa-solid fa-heart"></i> My Wishlist</a></li> -->
                  <li>
                    <a href="/logout" class="menu-item logout">
                      <i class="icon">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="#666" width="20" height="20">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                      </i> 
                      <span>Logout</span>
                    </a>
                  </li>
                </ul>
              </div>
              <div class="main-content">
                <div class="greeting">
                  Order Details
                  <div class="button-group">
                    <a href="/orderListing" class="back-btn">
                      <i class="fa-solid fa-arrow-left"></i> Back to Orders
                    </a>
                    <button class="action-btn" onclick="openInvoiceModal()">
                      <i class="fa-solid fa-file-pdf"></i> Download Invoice
                    </button>
                  </div>
                </div>
                <div class="order-summary">
                  <div class="order-header">
                    <span class="order-id">Order ID: <%= order.orderId %></span>
                    <div class="order-status-container">
                      <span class="order-status status-<%= order.status.toLowerCase().replace(' ', '') %>"><%= order.status %></span>
                      <% if (order.status.toLowerCase() !== 'delivered' && order.status.toLowerCase() !== 'canceled' && order.status.toLowerCase() !== 'return request' && order.status.toLowerCase() !== 'returned') { %>
                        <button class="action-btn" onclick="cancelOrder('<%= order._id %>')">
                          <i class="fa-solid fa-times"></i> Cancel Order
                        </button>
                      <% } %>
                      <% if (order.status.toLowerCase() === 'delivered') { %>
                        <button class="return-btn" onclick="returnOrder('<%= order._id %>')">
                          <i class="fa-solid fa-undo"></i> Return Order
                        </button>
                      <% } %>
                    </div>
                  </div>
                  <div class="order-meta">
                    <p>Order Date: <%= new Date(order.createdOn).toLocaleDateString('en-GB') %></p>
                    <p>Invoice Date: <%= order.invoiceDate ? new Date(order.invoiceDate).toLocaleDateString('en-GB') : 'N/A' %></p>
                  </div>
                </div>
                <div class="product-list">
                  <h3>Ordered Items</h3>
                  <% order.orderedItems.forEach(item => { %>
                    <div class="product-item">
                      <div class="product-image">
                        <img src="<%= item.product.productImage && item.product.productImage.length > 0 ? '/' + item.product.productImage[0] : 'https://via.placeholder.com/60' %>" alt="<%= item.product.productName %>">
                      </div>
                      <div class="product-details">
                        <div class="product-name"><%= item.product.productName %></div>
                        <div class="product-meta">Quantity: <%= item.quantity %></div>
                        <div class="product-meta">Price: ₹<%= item.price %></div>
                      </div>
                      <div class="product-actions">
                        <div class="product-subtotal">Subtotal: ₹<%= item.quantity * item.price %></div>
                        <% if (item.quantity === 0) { %>
                          <span class="product-status status-canceled">Canceled</span>
                        <% } else if (order.returnReasons && order.returnReasons.some(r => r.productId.toString() === item._id.toString())) { %>
                          <span class="product-status status-returned">Returned</span>
                        <% } else if (order.status.toLowerCase() === 'delivered') { %>
                          <span class="product-status status-delivered">Delivered</span>
                          <button class="return-btn" onclick="returnProduct('<%= item._id %>', '<%= order._id %>', '<%= item.product.productName %>')">
                            <i class="fa-solid fa-undo"></i> Return Product
                          </button>
                        <% } else if (order.status.toLowerCase() !== 'canceled' && order.status.toLowerCase() !== 'return request' && order.status.toLowerCase() !== 'returned') { %>
                          <button class="cancel-product-btn" onclick="cancelProduct('<%= item.product.productName %>', '<%= item._id %>', '<%= order._id %>')">
                            <i class="fa-solid fa-times"></i> Cancel Product
                          </button>
                        <% } %>
                      </div>
                    </div>
                  <% }) %>
                </div>
                <div class="total-payment">
                  <h3>Payment Summary</h3>
                  <p>Total Price: ₹<%= order.orderedItems.reduce((sum, item) => sum + (item.quantity * item.regularPrice), 0)  %></p>
                  <p>Discount: ₹<%= order.discount %></p>
                  <p>Coupon Discount: ₹<%= order.couponDiscount %></p>
                  <p class="final-amount">Final Amount: ₹<%= order.finalAmount %></p>
                  <p>Coupon Applied: <%= order.couponApplied ? 'Yes' : 'No' %></p>
                  <p>Payment Method: <%= order.paymentMethod.charAt(0).toUpperCase() + order.paymentMethod.slice(1) %></p>
                </div>
                <div class="shipping-address">
                  <h3>Shipping Address</h3>
                  <p><strong><%= order.address.name %></strong></p>
                  <p><%= order.address.landMark %></p>
                  <p><%= order.address.city %>, <%= order.address.state %>, <%= order.address.pincode %>, <%= order.address.country %></p>
                  <p>Phone: <%= order.address.phone %></p>
                  <p>Alt Phone: <%= order.address.altPhone %></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <div id="invoiceModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeInvoiceModal()">×</span>
        <h2>Download Invoice</h2>
        <p>Are you sure you want to download the invoice for Order ID: <%= order.orderId %>?</p>
        <div class="button-group">
          <button class="download-btn" onclick="downloadInvoice()">Download Invoice</button>
          <button class="cancel-btn" onclick="closeInvoiceModal()">Cancel</button>
        </div>
      </div>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    function cancelOrder(orderId) {
      console.log('Cancel order initiated for _id:', orderId);
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d32f2f',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No'
      }).then((result) => {
        if (result.isConfirmed) {
          console.log('Sending fetch to /cancel/', orderId);
          fetch(`/cancel/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then(response => {
              console.log('Cancel order response status:', response.status, 'OK:', response.ok);
              if (!response.ok) {
                response.text().then(text => {
                  console.log('Raw response:', text.slice(0, 100));
                });
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              console.log('Cancel order response data:', data);
              if (data.success) {
                Swal.fire({
                  title: 'Canceled!',
                  text: 'Order has been canceled successfully.',
                  icon: 'success',
                  confirmButtonColor: '#3085d6'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                console.error('Cancel order failed:', data.message);
                Swal.fire({
                  title: 'Error!',
                  text: data.message || 'Failed to cancel order.',
                  icon: 'error',
                  confirmButtonColor: '#3085d6'
                });
              }
            })
            .catch(error => {
              console.error('Error canceling order:', error.message);
              Swal.fire({
                title: 'Error!',
                text: `An error occurred while canceling the order: ${error.message}`,
                icon: 'error',
                confirmButtonColor: '#3085d6'
              });
            });
        }
      });
    }

    function cancelProduct(productName, productId, orderId) {
      console.log('Cancel product initiated for product:', productId, '_id:', orderId);
      Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to cancel ${productName}?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d32f2f',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No'
      }).then((result) => {
        if (result.isConfirmed) {
          console.log('Sending fetch to /cancel-product/', orderId, 'with product:', productId);
          fetch(`/cancel-product/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId })
          })
            .then(response => {
              console.log('Cancel product response status:', response.status, 'OK:', response.ok);
              if (!response.ok) {
                response.text().then(text => {
                  console.log('Raw response:', text.slice(0, 100));
                });
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              console.log('Cancel product response data:', data);
              if (data.success) {
                Swal.fire({
                  title: 'Canceled!',
                  text: 'Product has been canceled successfully.',
                  icon: 'success',
                  confirmButtonColor: '#3085d6'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                console.error('Cancel product failed:', data.message);
                Swal.fire({
                  title: 'Error!',
                  text: data.message || 'Failed to cancel product.',
                  icon: 'error',
                  confirmButtonColor: '#3085d6'
                });
              }
            })
            .catch(error => {
              console.error('Error canceling product:', error.message);
              Swal.fire({
                title: 'Error!',
                text: `An error occurred while canceling the product: ${error.message}`,
                icon: 'error',
                confirmButtonColor: '#3085d6'
              });
            });
        }
      });
    }

    function returnOrder(orderId) {
      console.log('Return order initiated for _id:', orderId);
      Swal.fire({
        title: 'Return Order',
        text: 'Please provide the reason for returning this order:',
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        inputAttributes: {
          maxlength: 500,
          style: 'resize: vertical; min-height: 100px;'
        },
        showCancelButton: true,
        confirmButtonColor: '#ff9800',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Submit Return',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
          if (!value || value.trim() === '') {
            return 'You must provide a reason for the return.';
          }
        }
      }).then((result) => {
        if (result.isConfirmed) {
          const reason = result.value.trim();
          console.log('Sending fetch to /return/', orderId, 'with reason:', reason);
          fetch(`/return/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reason })
          })
            .then(response => {
              console.log('Return order response status:', response.status, 'OK:', response.ok);
              if (!response.ok) {
                response.text().then(text => {
                  console.log('Raw response:', text.slice(0, 100));
                });
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              console.log('Return order response data:', data);
              if (data.success) {
                Swal.fire({
                  title: 'Return Requested!',
                  text: 'Your return request has been submitted successfully.',
                  icon: 'success',
                  confirmButtonColor: '#3085d6'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                console.error('Return order failed:', data.message);
                Swal.fire({
                  title: 'Error!',
                  text: data.message || 'Failed to submit return request.',
                  icon: 'error',
                  confirmButtonColor: '#3085d6'
                });
              }
            })
            .catch(error => {
              console.error('Error submitting return request:', error.message);
              Swal.fire({
                title: 'Error!',
                text: `An error occurred while submitting the return request: ${error.message}`,
                icon: 'error',
                confirmButtonColor: '#3085d6'
              });
            });
        }
      });
    }

    function returnProduct(productId, orderId, productName) {
      console.log('Return product initiated for product:', productId, '_id:', orderId);
      Swal.fire({
        title: 'Return Product',
        text: `Please provide the reason for returning ${productName}:`,
        input: 'textarea',
        inputPlaceholder: 'Enter your reason here...',
        inputAttributes: {
          maxlength: 500,
          style: 'resize: vertical; min-height: 100px;'
        },
        showCancelButton: true,
        confirmButtonColor: '#ff9800',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Submit Return',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
          if (!value || value.trim() === '') {
            return 'You must provide a reason for the return.';
          }
        }
      }).then((result) => {
        if (result.isConfirmed) {
          const reason = result.value.trim();
          console.log('Sending fetch to /return-product/', orderId, 'with product:', productId);
          fetch(`/return-product/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, reason })
          })
            .then(response => {
              console.log('Return product response status:', response.status, 'OK:', response.ok);
              if (!response.ok) {
                response.text().then(text => {
                  console.log('Raw response:', text.slice(0, 100));
                });
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              console.log('Return product response data:', data);
              if (data.success) {
                Swal.fire({
                  title: 'Return Requested!',
                  text: 'Your product return request has been submitted successfully.',
                  icon: 'success',
                  confirmButtonColor: '#3085d6'
                }).then(() => {
                  window.location.reload();
                });
              } else {
                console.error('Return product failed:', data.message);
                Swal.fire({
                  title: 'Error!',
                  text: data.message || 'Failed to submit product return request.',
                  icon: 'error',
                  confirmButtonColor: '#3085d6'
                });
              }
            })
            .catch(error => {
              console.error('Error submitting product return request:', error.message);
              Swal.fire({
                title: 'Error!',
                text: `An error occurred while submitting the product return request: ${error.message}`,
                icon: 'error',
                confirmButtonColor: '#3085d6'
              });
            });
        }
      });
    }

    function openInvoiceModal() {
      document.getElementById('invoiceModal').style.display = 'flex';
    }

    function closeInvoiceModal() {
      document.getElementById('invoiceModal').style.display = 'none';
    }

    function downloadInvoice() {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();

      const primaryColor = '#05445E';
      doc.setFont("Helvetica", "normal");
      doc.setFontSize(12);

      doc.setFillColor(primaryColor);
      doc.rect(0, 0, 210, 40, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(24);
      doc.setFont("Helvetica", "bold");
      doc.text("INVOICE", 20, 25);
      doc.setFontSize(10);
      doc.setFont("Helvetica", "normal");
      doc.text("HOURLY", 150, 15);
      doc.text("hourly@example.com", 150, 20);
      doc.text("Phone: +91 123-456-7890", 150, 25);
      doc.text("GSTIN: 12ABCDE3456F7ZH", 150, 30);

      doc.setTextColor(0, 0, 0);
      doc.setFontSize(14);
      doc.setFont("Helvetica", "bold");
      doc.text("Bill To:", 20, 50);
      doc.setFontSize(10);
      doc.setFont("Helvetica", "normal");
      doc.text(`Name: ${"<%= order.address.name %>"}`, 20, 60);
      doc.text(`Address: ${"<%= order.address.landMark %>"}, ${"<%= order.address.city %>"}, ${"<%= order.address.state %>"}, ${"<%= order.address.country %>"}`, 20, 70);
      doc.text(`PIN: ${"<%= order.address.pincode %>"}`, 20, 80);
      doc.text(`Phone: ${"<%= order.address.phone %>"}`, 20, 90);
      doc.text(`Alt Phone: ${"<%= order.address.altPhone %>"}`, 20, 100);

      doc.setFontSize(14);
      doc.setFont("Helvetica", "bold");
      doc.text("Order Details", 20, 120);
      doc.setFontSize(10);
      doc.setFont("Helvetica", "normal");
      doc.text(`Order ID: <%= order.orderId %>`, 20, 130);
      doc.text(`Order Date: <%= order.createdOn.toLocaleDateString('en-GB') %>`, 20, 140);
      doc.text(`Payment Method: <%= order.paymentMethod %>`, 20, 150);

      const tableStartY = 165;
      const columnWidths = { item: 80, qty: 20, price: 30, total: 30 };
      const columnPositions = { item: 20, qty: 100, price: 120, total: 150 };

      doc.setFillColor(primaryColor);
      doc.rect(20, tableStartY - 5, 170, 8, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(10);
      doc.setFont("Helvetica", "bold");
      doc.text("Item", columnPositions.item + 2, tableStartY);
      doc.text("Qty", columnPositions.qty + 2, tableStartY);
      doc.text("Price", columnPositions.price + 2, tableStartY);
      doc.text("Total", columnPositions.total + 2, tableStartY);

      doc.setTextColor(0, 0, 0);
      doc.setFont("Helvetica", "normal");
      let yPos = tableStartY + 10;
      <% order.orderedItems.forEach((item, index) => { %>
        doc.rect(20, yPos - 5, 170, 8);
        doc.text("<%= item.product.productName %>", columnPositions.item + 2, yPos);
        doc.text("<%= item.quantity %>", columnPositions.qty + 2, yPos);
        doc.text("₹<%= item.price %>", columnPositions.price + 2, yPos);
        doc.text("₹<%= item.price * item.quantity %>", columnPositions.total + 2, yPos);
        yPos += 10;
      <% }) %>

      doc.setFont("Helvetica", "bold");
      doc.rect(20, yPos - 5, 170, 8);
      doc.text("Grand Total", columnPositions.price + 2, yPos);
      doc.text("₹<%= order.orderedItems.reduce((sum, item) => item.quantity > 0 ? sum + (item.quantity * item.price) : sum, 0) %>", columnPositions.total + 2, yPos);

      const pageHeight = doc.internal.pageSize.height;
      doc.setFontSize(10);
      doc.setFont("Helvetica", "italic");
      doc.setTextColor(100, 100, 100);
      doc.text("Thank you for your purchase!", 105, pageHeight - 20, { align: "center" });

      try {
        doc.save(`invoice_<%= order.orderId %>.pdf`);
        closeInvoiceModal();
      } catch (error) {
        console.error("Error generating PDF:", error);
        alert("Failed to download invoice. Please try again.");
      }
    }
  </script>
</body>
</html>

<%- include('../../views/partials/user/footer') %>